using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Facebook.Linq;
using System.Data.Linq.Mapping;
using Facebook;

namespace facebook.Tables
{
    /// <summary>
    /// https://developers.facebook.com/docs/reference/fql/stream
    /// </summary>
    [Table(Name = "stream")]
    public class Stream
    {
        /// <summary>
        /// An array containing the text and URL for each action link
        /// 
        /// original type is: array
        /// </summary>
        [Column(Name = "action_links" , IsPrimaryKey = true)]
        public object ActionLinks { get; set; }

        /// <summary>
        /// The ID of the user, page, group, or event that published the post
        /// 
        /// original type is: (id) or (unsigned int32)
        /// </summary>
        [Column(Name = "actor_id" )]
        public Uid ActorId { get; set; }

        /// <summary>
        /// An array of app-specific information optionally supplied to create the attachment to the post
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "app_data" )]
        public object AppData { get; set; }

        /// <summary>
        /// For posts published by apps, the ID of that app. If the value is empty, it indicates a Facebook feature generated the post
        /// 
        /// original type is: id
        /// </summary>
        [Column(Name = "app_id" )]
        public AppId AppId { get; set; }

        /// <summary>
        /// An array of information about the attachment to the post
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "attachment" )]
        public object Attachment { get; set; }

        /// <summary>
        /// For posts published by apps, the full name of that app
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "attribution" )]
        public string Attribution { get; set; }

        /// <summary>
        /// Count for how many people claimed the offer
        /// 
        /// original type is: unsigned int32
        /// </summary>
        [Column(Name = "claim_count" )]
        public object ClaimCount { get; set; }

        /// <summary>
        /// An array containing comments information
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "comments" )]
        public object Comments { get; set; }

        /// <summary>
        /// The time the post was published, expressed as UNIX timestamp
        /// 
        /// original type is: timestamp
        /// </summary>
        [Column(Name = "created_time" )]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Text of stories not intentionally generated by users, such as those generated when two users become friends. You must have the "Include recent activity stories" migration enabled in your app to retrieve this field
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "description" )]
        public string Description { get; set; }

        /// <summary>
        /// The list of tags in the post description
        /// 
        /// original type is: array
        /// </summary>
        [Column(Name = "description_tags" )]
        public Tags DescriptionTags { get; set; }

        /// <summary>
        /// UNIX timestamp of when the offer expires
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "expiration_timestamp" )]
        public string ExpirationTimestamp { get; set; }

        /// <summary>
        /// Feed targeting information
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "feed_targeting" )]
        public object FeedTargeting { get; set; }

        /// <summary>
        /// The filter key to fetch data with. This key should be retrieved by querying the stream_filter FQL table or with the special values 'others' or 'owner'.
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "filter_key" )]
        public string FilterKey { get; set; }

        /// <summary>
        /// Number of impressions of this post. This data is visible only if you have <a href="/docs/authentication/permissions">read_insights</a> permission from a page owner
        /// 
        /// original type is: unsigned int32
        /// </summary>
        [Column(Name = "impressions" )]
        public object Impressions { get; set; }

        /// <summary>
        /// Whether the post is exportable
        /// 
        /// original type is: number (min: 0) (max: 1)
        /// </summary>
        [Column(Name = "is_exportable" )]
        public object IsExportable { get; set; }

        /// <summary>
        /// Whether a post has been set to hidden
        /// 
        /// original type is: bool
        /// </summary>
        [Column(Name = "is_hidden" )]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// Whether the post is published
        /// 
        /// original type is: bool
        /// </summary>
        [Column(Name = "is_published" )]
        public bool? IsPublished { get; set; }

        /// <summary>
        /// An array containing likes information
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "likes" )]
        public object Likes { get; set; }

        /// <summary>
        /// The message written in the post
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "message" )]
        public string Message { get; set; }

        /// <summary>
        /// The list of tags in the post message
        /// 
        /// original type is: array
        /// </summary>
        [Column(Name = "message_tags" )]
        public Tags MessageTags { get; set; }

        /// <summary>
        /// ID of the parent post
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "parent_post_id" )]
        public string ParentPostId { get; set; }

        /// <summary>
        /// The URL of the post
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "permalink" )]
        public string Permalink { get; set; }

        /// <summary>
        /// ID of the place associated with the post
        /// 
        /// original type is: id
        /// </summary>
        [Column(Name = "place" )]
        public object Place { get; set; }

        /// <summary>
        /// The ID of the post
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "post_id" )]
        public PostId PostId { get; set; }

        /// <summary>
        /// The privacy settings for a post
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "privacy" )]
        public object Privacy { get; set; }

        /// <summary>
        /// Status of the promotion, if the post was promoted
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "promotion_status" )]
        public string PromotionStatus { get; set; }

        /// <summary>
        /// UNIX timestamp of the scheduled publish time for the post
        /// 
        /// original type is: timestamp
        /// </summary>
        [Column(Name = "scheduled_publish_time" )]
        public DateTime? ScheduledPublishTime { get; set; }

        /// <summary>
        /// Number of times the post has been shared
        /// 
        /// original type is: unsigned int32
        /// </summary>
        [Column(Name = "share_count" )]
        public object ShareCount { get; set; }

        /// <summary>
        /// The ID of the user, page, group, or event whose wall the post is on
        /// 
        /// original type is: id
        /// </summary>
        [Column(Name = "source_id" )]
        public Uid SourceId { get; set; }

        /// <summary>
        /// Whether user is subscribed to the post
        /// 
        /// original type is: bool
        /// </summary>
        [Column(Name = "subscribed" )]
        public bool? Subscribed { get; set; }

        /// <summary>
        /// An array of IDs tagged in the message of the post.
        /// 
        /// original type is: array
        /// </summary>
        [Column(Name = "tagged_ids" )]
        public object TaggedIds { get; set; }

        /// <summary>
        /// The user, page, group, or event to whom the post was directed
        /// 
        /// original type is: id
        /// </summary>
        [Column(Name = "target_id" )]
        public StreamTargetId TargetId { get; set; }

        /// <summary>
        /// Ads targeting information of the post
        /// 
        /// original type is: struct
        /// </summary>
        [Column(Name = "targeting" )]
        public object Targeting { get; set; }

        /// <summary>
        /// Timeline visibility information of the post
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "timeline_visibility" )]
        public string TimelineVisibility { get; set; }

        /// <summary>
        /// The type of this story. Possible values are:
        /// 
        /// original type is: int32
        /// </summary>
        [Column(Name = "type" )]
        public StreamType Type { get; set; }

        /// <summary>
        /// The time the post was last updated, which occurs when a user comments on the post, expressed as a UNIX timestamp
        /// 
        /// original type is: timestamp
        /// </summary>
        [Column(Name = "updated_time" )]
        public DateTime? UpdatedTime { get; set; }

        /// <summary>
        /// ID of the user or Page the post was shared from
        /// 
        /// original type is: numeric string
        /// </summary>
        [Column(Name = "via_id" )]
        public Uid ViaId { get; set; }

        /// <summary>
        /// The ID of the current session user
        /// 
        /// original type is: id
        /// </summary>
        [Column(Name = "viewer_id" )]
        public Uid ViewerId { get; set; }

        /// <summary>
        /// ID of the location associated with the post
        /// 
        /// original type is: bool
        /// </summary>
        [Column(Name = "with_location" )]
        public bool? WithLocation { get; set; }

        /// <summary>
        /// An array of IDs of entities (e.g. users) tagged in this post
        /// 
        /// original type is: array
        /// </summary>
        [Column(Name = "with_tags" )]
        public object WithTags { get; set; }

        /// <summary>
        /// When querying for the feed of a live stream box, this is the xid associated with the Live Stream box (you can provide 'default' if one is not available)
        /// 
        /// original type is: string
        /// </summary>
        [Column(Name = "xid" )]
        public Xid Xid { get; set; }

    }
}
